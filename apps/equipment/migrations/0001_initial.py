# Generated by Django 4.2.17 on 2025-01-04 22:50

# Python imports
import datetime

# Django imports
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

# external imports
import sortedm2m.fields
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("flatpages", "0001_initial"),
        ("accounts", "0001_initial"),
        ("bookings", "0001_initial"),
        ("photologue", "0013_alter_watermark_image"),
        ("labman_utils", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Shift",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=80, null=True)),
                ("description", tinymce.models.HTMLField()),
                ("start_time", models.TimeField(default=datetime.time(9, 0))),
                ("end_time", models.TimeField(default=datetime.time(18, 0))),
            ],
            options={
                "verbose_name": "Booking Shift",
                "verbose_name_plural": "Booking Shifts",
                "ordering": ["start_time"],
            },
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=80, null=True)),
                ("description", tinymce.models.HTMLField()),
                ("code", models.CharField(blank=True, max_length=80)),
                (
                    "level",
                    models.IntegerField(blank=True, default=None, editable=False, null=True),
                ),
                (
                    "files",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="labman_utils.document",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sub_locations",
                        to="equipment.location",
                    ),
                ),
                (
                    "pages",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="flatpages.flatpage",
                    ),
                ),
                (
                    "photos",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="photologue.photo",
                    ),
                ),
            ],
            options={
                "ordering": ("-code",),
            },
        ),
        migrations.CreateModel(
            name="Equipment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=80, null=True)),
                ("description", tinymce.models.HTMLField()),
                (
                    "files",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="labman_utils.document",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="equipment",
                        to="equipment.location",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="equipment",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "pages",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="flatpages.flatpage",
                    ),
                ),
                (
                    "photos",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="photologue.photo",
                    ),
                ),
                (
                    "policies",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="equipment",
                        to="bookings.bookingpolicy",
                    ),
                ),
                (
                    "shifts",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="equipment",
                        to="equipment.shift",
                    ),
                ),
            ],
            options={
                "verbose_name": "Equipment Item",
                "verbose_name_plural": "Equipment Items",
            },
        ),
        migrations.CreateModel(
            name="DocumentSignOff",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("version", models.IntegerField()),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="signatures",
                        to="labman_utils.document",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="signatures",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserListEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "hold",
                    models.BooleanField(default=True, verbose_name="User clearable hold"),
                ),
                (
                    "admin_hold",
                    models.BooleanField(default=False, verbose_name="Management hold"),
                ),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "equipment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users",
                        to="equipment.equipment",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounts.role",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_of",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User List Entry",
                "verbose_name_plural": "User List Entries",
                "ordering": ["equipment", "-role", "user"],
                "unique_together": {("equipment", "user")},
            },
        ),
        migrations.AddConstraint(
            model_name="location",
            constraint=models.UniqueConstraint(fields=("name",), name="Unique Location Name"),
        ),
        migrations.AddConstraint(
            model_name="location",
            constraint=models.UniqueConstraint(fields=("code",), name="Unique Location Code"),
        ),
        migrations.AddConstraint(
            model_name="equipment",
            constraint=models.UniqueConstraint(fields=("name",), name="Unique Equipment Name"),
        ),
        migrations.AlterUniqueTogether(
            name="documentsignoff",
            unique_together={("document", "version", "user")},
        ),
    ]
