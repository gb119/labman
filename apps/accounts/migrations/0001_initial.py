# Generated by Django 4.2.17 on 2025-01-04 22:50

# Django imports
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

# external imports
import sortedm2m.fields
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("photologue", "0013_alter_watermark_image"),
        ("flatpages", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("labman_utils", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=80, null=True)),
                ("description", tinymce.models.HTMLField()),
                ("level", models.IntegerField(default=0)),
                (
                    "files",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="labman_utils.document",
                    ),
                ),
                (
                    "pages",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="flatpages.flatpage",
                    ),
                ),
                (
                    "photos",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="photologue.photo",
                    ),
                ),
            ],
            options={
                "ordering": ["level"],
            },
        ),
        migrations.CreateModel(
            name="ResearchGroup",
            fields=[
                ("name", models.CharField(blank=True, max_length=80, null=True)),
                ("description", tinymce.models.HTMLField()),
                (
                    "code",
                    models.CharField(max_length=10, primary_key=True, serialize=False),
                ),
                (
                    "files",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="labman_utils.document",
                    ),
                ),
                (
                    "pages",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="flatpages.flatpage",
                    ),
                ),
                (
                    "photos",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="photologue.photo",
                    ),
                ),
            ],
            options={
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=80, null=True)),
                ("description", tinymce.models.HTMLField()),
                ("short_name", models.CharField(max_length=20)),
                ("code", models.CharField(max_length=20)),
                (
                    "files",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="labman_utils.document",
                    ),
                ),
                (
                    "pages",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="flatpages.flatpage",
                    ),
                ),
                (
                    "photos",
                    sortedm2m.fields.SortedManyToManyField(
                        blank=True,
                        help_text=None,
                        related_name="%(class)s",
                        to="photologue.photo",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined"),
                ),
                ("number", models.IntegerField(blank=True, null=True)),
                ("title", models.CharField(blank=True, max_length=20, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managing",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "pages",
                    sortedm2m.fields.SortedManyToManyField(blank=True, help_text=None, to="flatpages.flatpage"),
                ),
                (
                    "photos",
                    sortedm2m.fields.SortedManyToManyField(blank=True, help_text=None, to="photologue.photo"),
                ),
                (
                    "project",
                    sortedm2m.fields.SortedManyToManyField(
                        help_text=None,
                        related_name="researchers",
                        to="accounts.project",
                    ),
                ),
                (
                    "research_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="members",
                        to="accounts.researchgroup",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "ordering": ["last_name", "first_name"],
                "permissions": [("access_admin", "Can Access the Admin backend")],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name="role",
            constraint=models.UniqueConstraint(fields=("name",), name="Unique Role Name"),
        ),
        migrations.AddConstraint(
            model_name="researchgroup",
            constraint=models.UniqueConstraint(fields=("name",), name="Unique Research Group Name"),
        ),
        migrations.AddConstraint(
            model_name="project",
            constraint=models.UniqueConstraint(fields=("name",), name="Unique Project Name"),
        ),
    ]
